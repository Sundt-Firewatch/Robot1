#!/usr/bin/env python3
"""
firewatch.py – Minimal RGB‑only fire‑watch prototype (console alert only)
------------------------------------------------------------------------
This version strips out **all GPIO, siren, LTE, and MQTT code**. It simply
watches the Raspberry Pi Camera Module 3 for flame‑coloured pixels and
prints **"Alert – Fire Detected!"** to the console whenever an alarm
condition is met. Use this to verify your camera + OpenCV pipeline before
wiring any hardware.

Dependencies (install inside your virtual‑env):
    sudo apt install -y python3-picamera2 python3-opencv

Systemd: copy the service block at the bottom of this file to
/etc/systemd/system/firewatch.service then enable it with
    sudo systemctl enable --now firewatch
"""
from __future__ import annotations

import time
from typing import Tuple

import cv2
import numpy as np
from picamera2 import Picamera2

# ---------------------- user‑configurable constants ---------------------- #
PIXEL_THRESHOLD: int = 500    # min # HSV‑mask pixels to count as fire
FRAME_SIZE: Tuple[int, int] = (640, 480)  # resolution to process (w, h)
COOLDOWN: int = 15            # seconds before another alert prints

# HSV bounds for typical yellow/orange flame pixels (tweak for environment)
HSV_LOWER = (0, 50, 200)   # hue 0–35 covers reds → oranges
HSV_UPPER = (35, 255, 255)

# ----------------------------- helpers ---------------------------------- #

def is_flame(frame_bgr: np.ndarray) -> bool:
    """Return True if flame‑coloured area exceeds PIXEL_THRESHOLD pixels."""
    hsv = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, HSV_LOWER, HSV_UPPER)
    return int(cv2.countNonZero(mask)) > PIXEL_THRESHOLD

# -------------------------- main routine -------------------------------- #

def main() -> None:
    print("[firewatch] starting – RGB‑only console mode …")

    cam = Picamera2()
    cam.configure(
        cam.create_video_configuration(main={"size": FRAME_SIZE, "format": "BGR888"})
    )
    cam.start()

    last_alert = 0.0  # epoch time of last alert

    try:
        while True:
            frame = cam.capture_array("main")  # numpy BGR888
            if is_flame(frame):
                now = time.time()
                if now - last_alert > COOLDOWN:
                    print("Alert – Fire Detected!")
                    last_alert = now
            time.sleep(0.25)  # ~4 FPS processing rate
    except KeyboardInterrupt:
        print("[firewatch] shutting down via Ctrl‑C …")
    finally:
        cam.stop()


if __name__ == "__main__":
    main()

# -------------------------- systemd helper ------------------------------ #
# Save the block below as /etc/systemd/system/firewatch.service then run:
#   sudo systemctl enable --now firewatch
# ----------------------------------------------------------------------- #
# [Unit]
# Description=Fire‑Watch Robot (RGB‑only, console alert)
# After=network.target
#
# [Service]
# User=pi
# WorkingDirectory=/home/pi/firewatch
# ExecStart=/home/pi/firewatch/bin/python /home/pi/firewatch/firewatch.py
# Restart=on-failure
# Environment=PYTHONUNBUFFERED=1
#
# [Install]
# WantedBy=multi-user.target
